import { Telegraf } from 'telegraf';
import { MyContext } from '../../types/bot';
import { listService } from '../../services/listService';
import { displayListsMessage } from '../commands';
import { calculatorService } from '../../services/calculatorService';
import { getListKeyboard, getConditionsKeyboard } from '../keyboards/listKeyboard';
import { getMealsKeyboard, getDishesKeyboard } from '../keyboards/dishesKeyboard';
import { formatListMessage } from '../../utils/messageFormatters';

export function setupActions(bot: Telegraf<MyContext>) {
    // Create new list
    bot.action('create_new_list', async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const list = await listService.createNewList(userId);
        
        if (!list) {
            await ctx.reply('–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤ (10). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ /mylists');
            return;
        }

        await ctx.editMessageText(
            `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ *${list.name}*\\!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`,
            { 
                parse_mode: 'MarkdownV2',
                reply_markup: getListKeyboard(list.id)
            }
        );
    });

    // Open list
    bot.action(/^open_list:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);

        if (!list) {
            await ctx.reply('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.');
            return;
        }

        const message = formatListMessage(list);
        await ctx.editMessageText(message, {
            parse_mode: 'MarkdownV2',
            reply_markup: getListKeyboard(list.id)
        });
    });

    // Edit name
    bot.action(/^edit_name:(\d+)$/, async (ctx) => {
        const listId = parseInt(ctx.match[1]);
        ctx.session.editingListId = listId;
        ctx.session.editingMode = 'name';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞:');
    });

    // Edit people count
    bot.action(/^edit_people:(\d+)$/, async (ctx) => {
        const listId = parseInt(ctx.match[1]);
        ctx.session.editingListId = listId;
        ctx.session.editingMode = 'people';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
    });

    // Edit days
    bot.action(/^edit_days:(\d+)$/, async (ctx) => {
        const listId = parseInt(ctx.match[1]);
        ctx.session.editingListId = listId;
        ctx.session.editingMode = 'days';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
    });

    // Edit conditions
    bot.action(/^edit_conditions:(\d+)$/, async (ctx) => {
        const listId = parseInt(ctx.match[1]);
        await ctx.editMessageReplyMarkup(getConditionsKeyboard(listId));
    });

    // Edit dishes
    bot.action(/^edit_dishes:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);

        if (list) {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
                reply_markup: getMealsKeyboard(listId, list.meals)
            });
        }
    });

    // Select meal to edit
    bot.action(/^select_meal:(\d+):(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const mealIndexStr = ctx.match[2];
        const mealIndex = parseInt(mealIndexStr);
        
        ctx.session.editingListId = listId;
        ctx.session.editingMealIndex = mealIndex;

        const availableDishes = listService.getAvailableDishes();

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ:', {
            reply_markup: getDishesKeyboard(listId, mealIndex, availableDishes)
        });
    });

    // Select dish for meal
    bot.action(/^select_dish:(\d+):(\d+):(.+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const mealIndexStr = ctx.match[2];
        const dishId = ctx.match[3];
        const mealIndex = parseInt(mealIndexStr);
        
        await listService.updateMealDish(userId, listId, mealIndex, dishId);
        
        // Clear editing state
        ctx.session.editingListId = undefined;
        ctx.session.editingMealIndex = undefined;

        const list = await listService.getList(userId, listId);
        if (list) {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
                reply_markup: getMealsKeyboard(listId, list.meals)
            });
        }
    });

    // Back to meals
    bot.action(/^back_to_meals:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);

        if (list) {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
                reply_markup: getMealsKeyboard(listId, list.meals)
            });
        }
    });

    // Toggle conditions
    bot.action(/^toggle_rain:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);
        
        if (list) {
            const newValue = !list.conditions.rain;
            await listService.updateListConditions(userId, listId, {
                rain: newValue
            });
            await ctx.answerCbQuery(newValue ? '–î–æ–∂–¥—å ‚òîÔ∏è –≤–∫–ª—é—á–µ–Ω' : '–î–æ–∂–¥—å ‚òîÔ∏è –≤—ã–∫–ª—é—á–µ–Ω');
            await updateConditionsMessage(ctx, userId, listId);
        }
    });

    bot.action(/^toggle_swimming:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);
        
        if (list) {
            const newValue = !list.conditions.swimming;
            await listService.updateListConditions(userId, listId, {
                swimming: newValue
            });
            await ctx.answerCbQuery(newValue ? '–ö—É–ø–∞–Ω–∏–µ üèä‚Äç‚ôÇÔ∏è –≤–∫–ª—é—á–µ–Ω–æ' : '–ö—É–ø–∞–Ω–∏–µ üèä‚Äç‚ôÇÔ∏è –≤—ã–∫–ª—é—á–µ–Ω–æ');
            await updateConditionsMessage(ctx, userId, listId);
        }
    });

    bot.action(/^toggle_weight:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);
        
        if (list) {
            const newValue = !list.conditions.minimizeWeight;
            await listService.updateListConditions(userId, listId, {
                minimizeWeight: newValue
            });
            await ctx.answerCbQuery(newValue ? '–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–∞ ‚öñÔ∏è –≤–∫–ª—é—á–µ–Ω–∞' : '–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–∞ ‚öñÔ∏è –≤—ã–∫–ª—é—á–µ–Ω–∞');
            await updateConditionsMessage(ctx, userId, listId);
        }
    });

    bot.action(/^set_temp:(\w+):(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const temp = ctx.match[1];
        const listId = parseInt(ctx.match[2]);
        const list = await listService.getList(userId, listId);
        
        if (list) {
            const tempEmoji = {
                cold: '‚ùÑÔ∏è',
                cool: 'üå°Ô∏è',
                warm: '‚òÄÔ∏è',
                hot: 'üî•'
            };
            
            await listService.updateListConditions(userId, listId, {
                temperature: temp as 'cold' | 'cool' | 'warm' | 'hot'
            });
            await ctx.answerCbQuery(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${tempEmoji[temp as keyof typeof tempEmoji]}`);
            await updateConditionsMessage(ctx, userId, listId);
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏
    async function updateConditionsMessage(ctx: MyContext, userId: string, listId: number) {
        const list = await listService.getList(userId, listId);
        if (!list) return;

        const message = formatListMessage(list);
        
        await ctx.editMessageText(message, {
            parse_mode: 'MarkdownV2',
            reply_markup: getConditionsKeyboard(listId)
        });
    }

    // Generate list
    bot.action(/^generate:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);

        if (!list) {
            await ctx.reply('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const formattedList = calculatorService.formatFinalList(list);
        await ctx.reply(formattedList, { parse_mode: 'Markdown' });
    });

    // Delete list
    bot.action(/^delete:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        await listService.deleteList(userId, listId);
        await ctx.reply('–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω');
        await ctx.deleteMessage();
    });

    // Back to list from conditions
    bot.action(/^back_to_list:(\d+)$/, async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const listId = parseInt(ctx.match[1]);
        const list = await listService.getList(userId, listId);
        
        if (list) {
            const message = formatListMessage(list);
            await ctx.editMessageText(message, {
                parse_mode: 'MarkdownV2',
                reply_markup: getListKeyboard(listId)
            });
        }
    });

    // Back to lists
    bot.action('back_to_lists', async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const lists = await listService.getUserLists(userId);
        // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await displayListsMessage(ctx, lists, false);
    });

    // Handle text input for editing
    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const text = ctx.message.text;

        if (!ctx.session.editingListId || !ctx.session.editingMode) {
            return;
        }

        const listId = parseInt(ctx.session.editingListId.toString());
        const mode = ctx.session.editingMode;

        try {
            switch (mode) {
                case 'name':
                    await listService.updateListName(userId, listId, text);
                    await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    break;

                case 'people':
                    const people = parseInt(text);
                    if (isNaN(people) || people <= 0) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await listService.updatePeopleCount(userId, listId, people);
                    await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    break;

                case 'days':
                    const days = parseInt(text);
                    if (isNaN(days) || days <= 0) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await listService.updateDays(userId, listId, days);
                    await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                    break;
            }
        } finally {
            // Clear editing state
            ctx.session.editingListId = undefined;
            ctx.session.editingMode = undefined;
        }
    });
}
