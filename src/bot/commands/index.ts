import { Telegraf } from 'telegraf';
import { BotContext } from '../types';
import { formatBold, formatListItem } from '../../utils/formatters';
import { listService } from '../../services/listService';
import { getListKeyboard } from '../keyboards/listKeyboard';

export function setupCommands(bot: Telegraf<BotContext>) {
    bot.command('start', async (ctx) => {
        const message = `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Ö–æ–¥–∞. üèïÔ∏è

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/newlist - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
/mylists - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–∏ —Å–ø–∏—Å–∫–∏
/help - –ü–æ–º–æ—â—å

–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é /newlist`;

        await ctx.reply(message);
    });

    bot.command('help', async (ctx) => {
        const message = `üèïÔ∏è *Camping List Bot* - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ—Ö–æ–¥—É!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/newlist - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
/mylists - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Å–ø–∏—Å–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ /newlist
2. –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ö–æ–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –¥–Ω–µ–π –∏ —Ç.–¥.)
3. –í—ã–±–µ—Ä–∏ –±–ª—é–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
4. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!`;

        await ctx.reply(message, { parse_mode: 'Markdown' });
    });

    bot.command('newlist', async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const list = await listService.createNewList(userId);
        
        if (!list) {
            await ctx.reply('–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤ (10). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ /mylists');
            return;
        }

        await ctx.reply(
            `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ ${formatBold(list.name)}\\!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`,
            { 
                parse_mode: 'MarkdownV2',
                reply_markup: getListKeyboard(list.id)
            }
        );
    });

    bot.command('mylists', async (ctx) => {
        const userId = ctx.from?.id.toString();
        if (!userId) return;

        const lists = await listService.getUserLists(userId);

        if (lists.length === 0) {
            await ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /newlist');
            return;
        }

        const message = '*–¢–≤–æ–∏ —Å–ø–∏—Å–∫–∏:*\n\n' + 
            lists.map((list, i) => `${i + 1}. ${list.name}`).join('\n');

        await ctx.reply(message, { 
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: lists.map(list => [{
                    text: `–û—Ç–∫—Ä—ã—Ç—å "${list.name}"`,
                    callback_data: `open_list:${list.id}`
                }])
            }
        });
    });
}
